{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "virtualNetworkAddressRange": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "Virtual network address range."
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "defaultValue": "ad-vnet",
            "metadata": {
                "description": "The name of the virtualNetwork."
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "ad-vnet-subnet",
            "metadata": {
                "description": "The name of the subnet."
            }
        },
        "subnetRange": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "Subnet IP range."
            }
        },        
        "DomainName": {
            "type": "string",
            "defaultValue": "demo.com",
            "metadata": {
                "description": "The FQDN of the Active Directory Domain to be created"
            }
        },
        "DomainAdminUserName": {
            "type": "string",
            "defaultValue": "demoadmin",
            "metadata": {
                "description": "The name of the administrator account of the new VM and domain"
            }
        },
        "DomainAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password for the administrator account of the new VM and domain"
            }
        },

        "DcVmSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v3",
            "metadata": {
                "description": "Size of the VM for the Domain Controller"
            }
        },
        "DcVmName": {
            "type": "string",
            "defaultValue": "dc01",
            "metadata": {
                "description": "Domain Controller VM name."
            }
        },        
        "DcPrivateIpAddress": {
            "type": "string",
            "defaultValue": "10.0.0.4",
            "metadata": {
                "description": "Private IP address of the Domain Controller."
            }
        },

        "CaVmSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v3",
            "metadata": {
                "description": "Size of VM"
            }
        },


        "CaVmName": {
            "type": "string",
            "defaultValue": "ca01",
            "metadata": {
                "description": "Certificate Service VM name."
            }
            },        
        "CaAdminUsername": {
            "type": "string",
            "defaultValue": "caadmin",
            "metadata": {
                "description": "The name of the administrator of the Certificate Service VM."
            }
        },
        "CaAdminPassword": {
            "type": "secureString",
            "metadata": {
                "description": "The password for the administrator account of the Certificate Service VM."
            }
        },
        "UNIQUESTRING": {
            "type": "string",
            "metadata": {
                "description": "The string used as a suffix for the unique resources below."
            }
        },
        "KeyVaultName": {
            "metadata": {
                "description": "UNIQUE name of the Key Vault resource"
            },
            "type": "String",
            "defaultValue": "[concat('DEMO-KV-',parameters('UNIQUESTRING'))]"
        },

        "EventGridName": {
            "metadata": {
                "description": "UNIQUE name of the Event Grid resource"
            },
            "type": "String",
            "defaultValue": "[concat('DEMO-EG-',parameters('UNIQUESTRING'))]"
        },

        "StorageAccountName": {
            "metadata": {
                "description": "UNIQUE name of the StorageAccount resource"
            },     
            "type": "String",       
            "defaultValue": "[concat('demosa',parameters('UNIQUESTRING'))]"
        },
        
        "AutomationAccountName": {
            "metadata": {
                "description": "Name of the Automation Account resource"
            },
            "type": "String",
            "defaultValue": "[concat('DEMO-AA-',parameters('UNIQUESTRING'))]"
        },
        "workspaceName": {
            "type": "string",
            "defaultValue": "[concat('DEMO-LA-',parameters('UNIQUESTRING'))]",
            "metadata": {
            "description": "Specify the name of the Log Analytics workspace."
            }
        },
        "dataCollectionEndpointName": {
            "type": "String",
            "defaultValue": "[concat('DEMO-DCE-',parameters('UNIQUESTRING'))]",
            "metadata": {
                "description": "Specifies the name of the Data Collection Endpoints to create."
            }
        },
        "dataCollectionRuleName": {
            "type": "String",
            "defaultValue": "[concat('DEMO-DCR-',parameters('UNIQUESTRING'))]",
            "metadata": {
                "description": "Specifies the name of the Data Collection Rule to create."
            }
        },
        "webhookName": {
            "metadata": {
                "description": "Name of the Webhook resource"
            },
            "type": "String",
            "defaultValue": "clc-webhook"
        },
        "WorkerGroupName": {
            "metadata": {
                "description": "Name of the Hybrid Runbook Worker Group"
            },
            "defaultValue": "EnterpriseRootCA",
            "type": "string"
        },

        "Recipient": {
            "metadata": {
                "description": "Email address of the recipient of the certificate expiration notification"
            },
            "type": "String",
            "defaultValue": "john.doe@demo.com"
        },


        "sku": {
            "type": "string",
            "defaultValue": "PerGB2018",
            "allowedValues": [
            "CapacityReservation",
            "Free",
            "LACluster",
            "PerGB2018",
            "PerNode",
            "Premium",
            "Standalone",
            "Standard"
            ],
            "metadata": {
            "description": "Specify the pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
            }
        },
        "retentionInDays": {
            "type": "int",
            "defaultValue": 120,
            "metadata": {
            "description": "Specify the number of days to retain data."
            }
        },
        "resourcePermissions": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
            "description": "Specify true to use resource or workspace permissions, or false to require workspace permissions."
            }
        },
        "TableName": {
            "type": "string",
            "defaultValue":"Clcdata",
            "metadata": {
            "description": "Specify the name of the Table used for CERTLC dashboard data."
            }
        },
        "heartbeatTableRetention": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
            "description": "Specify the number of days to retain data in Heartbeat table."
            }
        },


        "workbookDisplayName": {
            "type": "string",
            "defaultValue": "CERTLC Dashboard",
            "metadata": {
                "description": "The friendly name for the workbook that is used in the Gallery or Saved List.  This name must be unique within a resource group."
            }
        },



        "WebhookExpiryTime": {
            "type": "string",
            "defaultValue": "[dateTimeAdd(utcNow('u'), 'P1Y')]",
            "metadata": {
                "description": "The expiry time for the webhook. Default is 365 days from now. (Example of the format in UTC timezone: 2025-01-22T08:18:24Z)"
            }
        },

        "ScheduleStartTime": {
            "type": "string",
            "defaultValue": "[dateTimeAdd(utcNow('u'), 'PT1H')]",
            "metadata": {
                "description": "The schedlule start time for the runbook. Default is 1 hour from now. (Example of the format in UTC timezone: 2025-01-22T08:18:24Z)"
            }
        },
        "workbookId": {
            "type": "string",
            "defaultValue": "[newGuid()]",
            "metadata": {
                "description": "The unique guid for this workbook instance"
            }
        },
        "ScheduleDashboardDataStartTime": {
            "type": "string",
            "defaultValue": "[dateTimeAdd(utcNow('u'), 'PT32M')]",
            "metadata": {
                "description": "The schedlule start time for the Dashboard Data Injestion runbook. Default is 30 minutes from now. (Example of the format in UTC timezone: 2026-01-22T08:18:24Z)"
            }
        },

        "_CurrentDateTimeInTicks": {
            "metadata": {
                "description": "Current date time in ticks used for unique variables."
            },
            "type": "string",
            "defaultValue": "[utcNow('yyyy-MM-dd')]"
        }
    
    },
    "variables": {
        "UniqueStringBasedOnTimeStamp": "[uniqueString(deployment().name, parameters('_CurrentDateTimeInTicks'))]",
        "DCnicName": "[concat(parameters('DCvmName'),'-nic')]",
        "DCpublicIPAddressName": "[concat(parameters('DCvmName'),'-ip')]",
        "CAnicName": "[concat(parameters('CAvmName'),'-nic')]",
        "Location": "[resourceGroup().location]",
        "TableName": "[concat(parameters('TableName'),'_CL')]",
        "streamName": "[concat('Custom-',parameters('TableName'),'RawData')]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-01-01",
            "name": "[variables('DCpublicIPAddressName')]",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "Static"
                }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "name": "VNet",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(deployment().properties.templateLink.uri,'nestedtemplates/vnet.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "virtualNetworkName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "virtualNetworkAddressRange": {
                        "value": "[parameters('virtualNetworkAddressRange')]"
                    },
                    "subnetName": {
                        "value": "[parameters('subnetName')]"
                    },
                    "subnetRange": {
                        "value": "[parameters('subnetRange')]"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2022-01-01",
            "name": "[variables('DCnicName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "VNet"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('DCprivateIPAddress')]",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('DCpublicIPAddressName'))]",
                                "properties": {
                                    "deleteOption": "Delete"
                                }
                            }
                        }
                    }
                ]
            }
        },
                
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2023-03-01",
            "name": "[parameters('DCvmName')]",
            "location": "[variables('location')]",
            "identity": {
                "type": "SystemAssigned"
            },            
            "dependsOn": [
                "[variables('DCnicName')]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('DCvmSize')]"
                },
                "osProfile": {
                    "computerName": "[parameters('DCvmName')]",
                    "adminUsername": "[parameters('DomainAdminUsername')]",
                    "adminPassword": "[parameters('DomainAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2022-Datacenter",
                        "version": "latest"  
                    },
                    "osDisk": {
                        "name": "[concat(parameters('DCvmName'),'_OSDisk')]",
                        "caching": "ReadOnly",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "StandardSSD_LRS"
                        }
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(parameters('DCvmName'), '_DataDisk')]",
                            "caching": "ReadWrite",
                            "createOption": "Empty",
                            "diskSizeGB": 20,
                            "managedDisk": {
                                "storageAccountType": "StandardSSD_LRS"
                            },
                            "lun": 0
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('DCnicName'))]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "type": "extensions",
                    "apiVersion": "2022-03-01",
                    "name": "CreateADForest",
                    "location": "[variables('location')]",
                    "dependsOn": [
                        "[parameters('DCvmName')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.19",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "ModulesUrl": "[uri(deployment().properties.templateLink.uri, 'DSC/CreateADPDC.zip')]",
                            "ConfigurationFunction": "CreateADPDC.ps1\\CreateADPDC",
                            "Properties": {
                                "DomainName": "[parameters('DomainName')]",
                                "AdminCreds": {
                                    "UserName": "[parameters('DomainAdminUsername')]",
                                    "Password": "PrivateSettingsRef:AdminPassword"
                                }
                            }
                        },
                        "protectedSettings": {
                            "Items": {
                                "AdminPassword": "[parameters('DomainAdminPassword')]"
                            }
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-04-01",
            "name": "UpdateVNetDNS",
            "dependsOn": [
                "CreateADForest"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(deployment().properties.templateLink.uri, 'nestedtemplates/vnet.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "virtualNetworkName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "virtualNetworkAddressRange": {
                        "value": "[parameters('virtualNetworkAddressRange')]"
                    },
                    "subnetName": {
                        "value": "[parameters('subnetName')]"
                    },
                    "subnetRange": {
                        "value": "[parameters('subnetRange')]"
                    },
                    "DNSServerAddress": {
                        "value": [
                            "[parameters('DCprivateIPAddress')]"
                        ]
                    },
                    "location": {
                        "value": "[variables('location')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2021-02-01",
            "name": "[variables('CAnicName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "VNet",
                "[variables('DCnicName')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                        "privateIPAllocationMethod": "Dynamic",
                        "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
                        }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2023-03-01",
            "name": "[parameters('CAvmName')]",
            "location": "[variables('location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "hardwareProfile": {
                "vmSize": "[parameters('CAvmSize')]"
                },
                "osProfile": {
                "computerName": "[parameters('CAvmName')]",
                "adminUsername": "[parameters('CAadminUsername')]",
                "adminPassword": "[parameters('CAadminPassword')]"
                },
                "storageProfile": {
                "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "2022-Datacenter",
                    "version": "latest"  
                },
                "osDisk": {
                    "name": "[format('{0}-OsDisk', parameters('CAvmName'))]",
                    "caching": "ReadWrite",
                    "createOption": "FromImage"
                },
                "dataDisks": [
                    {
                    "name": "[format('{0}-DataDisk', parameters('CAvmName'))]",
                    "caching": "None",
                    "createOption": "Empty",
                    "diskSizeGB": 127,
                    "lun": 0
                    }
                ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('CAnicName'))]"
                        }
                    ]
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('CAnicName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('DCvmName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('DCvmName'), 'CreateADForest')]",
                "[resourceId('Microsoft.Resources/deployments', 'UpdateVNetDNS')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2021-03-01",
            "name": "[format('{0}/{1}', parameters('CAvmName'), 'joindomain')]",
            "location": "[variables('location')]",
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                "name": "[parameters('domainName')]",
                "ouPath": "",
                "user": "[format('{0}\\{1}', parameters('domainName'), parameters('DomainAdminUsername'))]",
                "restart": true,
                "options": "3"
                },
                "protectedSettings": {
                "Password": "[parameters('DomainAdminPassword')]"
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('CAvmName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2022-03-01",
            "name": "[concat(parameters('CAvmName'), '/ExecuteScript')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('CAvmName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('CAvmName'), 'joindomain')]"
            ],
            "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.19",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "ModulesUrl": "[uri(deployment().properties.templateLink.uri, 'DSC/ExecuteScript.zip')]",
                    "ConfigurationFunction": "ExecuteScript.ps1\\ExecuteScript",
                    "Properties": {
                        "DomainName": "[parameters('DomainName')]",
                        "AdminCreds": {
                            "UserName": "[parameters('DomainAdminUsername')]",
                            "Password": "PrivateSettingsRef:AdminPassword"
                        },
                        "DCvmName": "[parameters('DCvmName')]",
                        "CAvmName": "[parameters('CAvmName')]",
                        "CAName": "DEMOCA",
                        "CDPURL": "[concat('http://',parameters('CAvmName'),'.',parameters('DomainName'))]",
                        "WebenrollURL": "[concat('http://',parameters('CAvmName'),'.',parameters('DomainName'))]",
                        "demoCertDNSName": "[concat('democert.',parameters('DomainName'))]",
                        "keyvaultName": "[parameters('KeyvaultName')]",
                        "Recipient": "[parameters('Recipient')]"
                    }
                },
                "protectedSettings": {
                    "Items": {
                        "AdminPassword": "[parameters('DomainAdminPassword')]"
                    }
                }
            }
        },

        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2023-02-01",
            "name": "[parameters('KeyvaultName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "VNet"
            ],
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "Standard"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [],
                "enabledForDeployment": false,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": false,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 90,
                "enableRbacAuthorization": true,
                "vaultUri": "[concat(concat('https://',parameters('KeyvaultName')),'.vault.azure.net/')]",
                "publicNetworkAccess": "Enabled"
            }
        },

        {
            "type": "Microsoft.Automation/automationAccounts",
            "apiVersion": "2022-08-08",
            "name": "[parameters('AutomationAccountName')]",
            "location": "[variables('location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "publicNetworkAccess": true,
                "disableLocalAuth": false,
                "sku": {
                    "name": "Basic"
                },
                "encryption": {
                    "keySource": "Microsoft.Automation",
                    "identity": {}
                }
            }
        },

        {
            "type": "Microsoft.Automation/automationAccounts/modules",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('AutomationAccountName'), '/PSPKI')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "contentLink": {
                    "uri": "https://devopsgallerystorage.blob.core.windows.net:443/packages/pspki.4.0.0.nupkg"
                }
            }
        },        
        
        {
            "name": "[concat(parameters('AutomationAccountName'),'/',parameters('WorkerGroupName'))]",
            "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups",
            "apiVersion": "2022-08-08",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
            }
        },

        {
            "name": "[concat(parameters('AutomationAccountName'), '/',parameters('WorkerGroupName'),'/',guid('demohw', variables('UniqueStringBasedOnTimeStamp')))]",
            "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups/hybridRunbookWorkers",
            "apiVersion": "2022-08-08",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('AutomationAccountName'),parameters('WorkerGroupName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('CAvmName'))]"
            ],
            "properties": {
                "vmResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('CAvmName'))]"
            }
        },

        {
            "type": "Microsoft.Automation/automationAccounts/runbooks",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('AutomationAccountName'), '/CertLifeCycleMgmt')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('CAvmName'))]"
            ],
            "properties": {
                "runbookType": "PowerShell",
                "logVerbose": false,
                "logProgress": false,
                "logActivityTrace": 0,
                "description": "Certificate Lifecycle Management",
                 "publishContentLink": {
                    "uri": "https://raw.githubusercontent.com/Azure/certlc/main/.runbook/runbook_v3.ps1",
                    "version": "2.1.0.0"
                }
            }
        },     

        {  
            "type": "Microsoft.Automation/automationAccounts/webhooks",  
            "apiVersion": "2015-10-31",  
            "name": "[concat(parameters('AutomationAccountName'), '/', parameters('webhookName'))]", 
            "dependsOn": [  
                "[parameters('automationAccountName')]",
                "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), 'CertLifeCycleMgmt')]"
            ],  
            "properties": {  
                "isEnabled": true,  
                "expiryTime": "[parameters('WebhookExpiryTime')]",  
                "runbook": {  
                    "name": "CertLifeCycleMgmt"  
                },
                "runOn": "[parameters('WorkerGroupName')]"
            }  
        } ,  

        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('automationAccountName'), '/SMTPServer')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
            ],
            "properties": {
                "isEncrypted": false,
                "value": "[concat('\"','localhost','\"')]",
                "description": "The name of the SMTP Server to send email notifications"
            }
        },        

        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('automationAccountName'), '/CAServer')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
            ],
            "properties": {
                "isEncrypted": false,
                "value": "[concat('\"',parameters('CaVmName'),'.',parameters('DomainName'),'\"')]",
                "description": "The name of the Certification Authority Server"
            }
        },     

        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('automationAccountName'), '/StorageAccount')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
            ],
            "properties": {
                "isEncrypted": false,
                "value": "[concat('\"',parameters('StorageAccountName'),'\"')]",
                "description": "The name of the Storage Account containing the message queue"
            }
        },         

        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('automationAccountName'), '/resourceGroup')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
            ],
            "properties": {
                "isEncrypted": false,
                "value": "[concat('\"',resourceGroup().name,'\"')]",
                "description": "The name of the Resource Group containing the Storage Account"
            }
        },   


        {
            "type": "Microsoft.Automation/automationAccounts/schedules",
            "apiVersion": "2023-11-01",
            "name": "[concat(parameters('AutomationAccountName'), '/Check CertLC Queue')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "description": "Check if pending requests must be managed.",
                "startTime": "[parameters('ScheduleStartTime')]",
                "expiryTime": "9999-12-31T23:59:59.9999999+00:00",
                "interval": 6,
                "frequency": "Hour",
                "timeZone": "Europe/Rome"
            }
        },

        {
            "type": "Microsoft.Automation/automationAccounts/jobSchedules",
            "apiVersion": "2023-11-01",
            "name": "[concat(parameters('AutomationAccountName'), '/',guid(resourceGroup().id, deployment().name,'-CertLCJobSchedule'))]",
            "dependsOn": [
                "[parameters('automationAccountName')]",
                "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), 'CertLifeCycleMgmt')]"
            ],
            "properties": {
                "runbook": {
                    "name": "CertLifeCycleMgmt"
                },
                "schedule": {
                    "name": "Check CertLC Queue"
                },
                "runOn": "[parameters('WorkerGroupName')]"
            }
        },


        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('CAvmName'),'/HybridWorkerExtension')]",
            "apiVersion": "2022-03-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('CAvmName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('CAvmName'), 'ExecuteScript')]"
            ],

            "properties": {
                "publisher": "Microsoft.Azure.Automation.HybridWorker",
                "type": "HybridWorkerForWindows",
                "typeHandlerVersion": "1.1",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                "AutomationAccountURL": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))).AutomationHybridServiceUrl]"
                
                }
            }
        },



        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name":  "[concat(parameters('DCvmName'),'/KeyVaultForWindows')]",
            "apiVersion": "2022-08-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('DCvmName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('CAvmName'), 'HybridWorkerExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.KeyVault",
                "type": "KeyVaultForWindows",
                "typeHandlerVersion": "3.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "secretsManagementSettings": {
                        "pollingIntervalInS": "60",
                        "linkOnRenewal": false,
                        "observedCertificates": 
                        [
                            {
                                "url":"[concat('https://',parameters('KeyvaultName'),'.vault.azure.net:443/secrets/democert')]",
                                "certificateStoreName": "MY",
                                "certificateStoreLocation": "LocalMachine",
                                "keyExportable": true,
                                "accounts": [
                                    "Network Service",
                                    "Local Service"
                                ]
                            }
                        ]          
                    }
                }
            }
        },

        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2023-01-01",
            "name": "[parameters('StorageAccountName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "dnsEndpointType": "Standard",
                "defaultToOAuthAuthentication": false,
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": false,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "requireInfrastructureEncryption": false,
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('StorageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('StorageAccountName'), '/default/certlc')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('StorageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
            ],
            "properties": {
                "metadata": {}
            }
        },

        {
            "type": "Microsoft.EventGrid/systemTopics",
            "apiVersion": "2023-06-01-preview",
            "name": "[parameters('EventGridName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]"
            ],
            "properties": {
                "source": "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
                "topicType": "microsoft.keyvault.vaults"
            }
        },

        {
            "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
            "apiVersion": "2023-06-01-preview",
            "name": "[concat(parameters('EventGridName'), '/CertLC-webhook')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventGrid/systemTopics', parameters('EventGridName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), parameters('webhookName'))]"
            ],
            "properties": {
                "destination": {
                    "properties": {
                        "maxEventsPerBatch": 1,
                        "preferredBatchSizeInKilobytes": 64,
                        "endpointUrl": "[reference(parameters('webhookName')).uri]"
                    },
                    "endpointType": "WebHook"
                },
                "filter": {
                    "includedEventTypes": [
                        "Microsoft.KeyVault.CertificateNearExpiry"
                    ]
                },
                "eventDeliverySchema": "EventGridSchema",
                "retryPolicy": {
                    "maxDeliveryAttempts": 30,
                    "eventTimeToLiveInMinutes": 1440
                }
            }
        },

        {
            "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
            "apiVersion": "2023-12-15-preview",
            "name": "[concat(parameters('EventGridName'), '/CertLC-queue')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventGrid/systemTopics', parameters('EventGridName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName') , 'default', 'certlc' )]"
            ],
            "properties": {
                "destination": {
                    "properties": {
                        "resourceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
                        "queueName": "certlc",
                        "queueMessageTimeToLiveInSeconds": 604800
                    },
                    "endpointType": "StorageQueue"
                },
                "filter": {
                    "includedEventTypes": [
                        "Microsoft.KeyVault.CertificateNearExpiry"
                    ],
                    "enableAdvancedFilteringOnArrays": true
                },
                "labels": [],
                "eventDeliverySchema": "EventGridSchema",
                "retryPolicy": {
                    "maxDeliveryAttempts": 30,
                    "eventTimeToLiveInMinutes": 1440
                }
            }
        },

        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2021-12-01-preview",
            "name": "[parameters('workspaceName')]",
            "location": "[variables('Location')]",
            "properties": {
            "sku": {
                "name": "[parameters('sku')]"
            },
            "retentionInDays": "[parameters('retentionInDays')]",
            "features": {
                "enableLogAccessUsingOnlyResourcePermissions": "[parameters('resourcePermissions')]"
            }
            }
        },

        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[format('{0}/{1}', parameters('workspaceName'), 'CERTLC - certificate list')]",
            "properties": {
                "etag": "*",
                "displayName": "CERTLC - certificate list",
                "category": "CERTLC",
                "query": "[concat(variables('TableName'),'| extend ExpirationDate = todatetime(CertExpiration) | extend ExpiryStatus = case(ExpirationDate <= now(), ''Expired'', ExpirationDate <= now() + 5d, ''Expiring in 5 Days'', ''Not Expired'')| where [''TimeGenerated''] == toscalar(',variables('TableName'),' | summarize max([''TimeGenerated'']))| project ExpiryStatus, CertExpiration, CertName, CertSubject, CertRecipient,  KeyVault, CertThumbprint, [''TimeGenerated'']| sort by ExpiryStatus')]",
                "version": 1
            },
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
            ]
        },

        {
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "apiVersion": "2020-08-01",
            "name": "[format('{0}/{1}', parameters('workspaceName'), 'CERTLC - certificate status')]",
            "properties": {
                "etag": "*",
                "displayName": "CERTLC - certificate status",
                "category": "CERTLC",
                "query": "[concat(variables('TableName'),'| where [''TimeGenerated''] == toscalar(',variables('TableName'),'| summarize max([''TimeGenerated'']))| extend ExpiryStatus = case(todatetime(CertExpiration) <= now(), ''Expired'',todatetime(CertExpiration) <= now() + 5d, ''Expiring in 5 Days'', ''Not Expired'')| summarize CertificateCount = count() by ExpiryStatus')]",
                "version": 1
            },
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
            ]
        },

        {
            "type": "Microsoft.OperationalInsights/workspaces/tables",
            "apiVersion": "2022-10-01",
            "name": "[format('{0}/{1}', parameters('workspaceName'), variables('TableName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('DCvmName'), 'CreateADForest')]"
            ],
            "properties": {
                "totalRetentionInDays": "[parameters('heartbeatTableRetention')]",
                "plan": "Analytics",
                "schema": {
                    "name": "[format('{0}_{1}', parameters('TableName'),'CL')]",
                    "columns": [
                        {
                            "name": "CertExpiration",
                            "type": "string",
                            "description": "Expiration date of the certificate"
                        },
                        {
                            "name": "CertIssuer",
                            "type": "string",
                            "description": "Name of the Certification Authority that issued the certificate"
                        },
                        {
                            "name": "CertName",
                            "type": "string",
                            "description": "Name of the certificate"
                        },
                        {
                            "name": "CertRecipient",
                            "type": "string",
                            "description": "Recipient to be notified about the expiration of the certificate"
                        },
                        {
                            "name": "CertSubject",
                            "type": "string",
                            "description": "Subject of the certificate"
                        },
                        {
                            "name": "CertThumbprint",
                            "type": "string",
                            "description": "Thumbprint of the certificate"
                        },
                        {
                            "name": "KeyVault",
                            "type": "string",
                            "description": "The Keyvault that owns the certificate"
                        },
                        {
                            "name": "TimeGenerated",
                            "type": "datetime",
                            "description": "The time at which the data was generated"
                        }
                    ]
                },
                "retentionInDays": "[parameters('heartbeatTableRetention')]"
            }
        },

        {
                "type": "Microsoft.Insights/dataCollectionEndpoints",
                "apiVersion": "2023-03-11",
                "name": "[parameters('dataCollectionEndpointName')]",
                "location": "[variables('Location')]",
                "properties": {
                    "networkAcls": {
                        "publicNetworkAccess": "Enabled"
                    }
                }
        },

        {
                "type": "Microsoft.Insights/dataCollectionRules",
                "dependsOn": [
                    "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('dataCollectionEndpointName'))]",
                    "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
                    "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), variables('TableName'))]"
                ],
                "apiVersion": "2023-03-11",
                "name": "[parameters('dataCollectionRuleName')]",
                "location": "[variables('location')]",
                "kind": "Direct",
                "properties": {
                    "dataCollectionEndpointId": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('dataCollectionEndpointName'))]",
                    "streamDeclarations": {
                        "[variables('streamName')]": {
                            "columns": [
                                {
                                    "name": "Time",
                                    "type": "datetime"
                                },
                                {
                                    "name": "KeyVault",
                                    "type": "string"
                                },
                                {
                                    "name": "AdditionalContext",
                                    "type": "string"
                                },
                                {
                                    "name": "CertName",
                                    "type": "string"
                                },
                                {
                                    "name": "CertIssuer",
                                    "type": "string"
                                },
                                {
                                    "name": "CertThumbprint",
                                    "type": "string"
                                },
                                {
                                    "name": "CertSubject",
                                    "type": "string"
                                },
                                {
                                    "name": "CertExpiration",
                                    "type": "string"
                                },
                                {
                                    "name": "CertRecipient",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "destinations": {
                        "logAnalytics": [
                            {
                                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
                                "name": "[parameters('workspaceName')]"
                            }
                        ]
                    },
                    "dataFlows": [
                        {
                            "streams": [
                                "[variables('streamName')]"
                            ],
                            "destinations": [
                                "[parameters('workspaceName')]"
                            ],
                            "transformKql": "source | project TimeGenerated = Time, KeyVault, CertName, CertIssuer, CertThumbprint, CertSubject, CertExpiration, CertRecipient",
                            "outputStream": "[concat('Custom-',variables('TableName'))]"
                        }
                    ]
                }
        },

        {
            "type": "microsoft.insights/workbooks",
            "name": "[parameters('workbookId')]",
            "location": "[variables('Location')]",
            "apiVersion": "2022-04-01",
            "dependsOn": [
            ],
            "kind": "shared",
            "properties": {
                "displayName": "[parameters('workbookDisplayName')]",
                "serializedData": "[concat('{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"', variables('TableName'), '\\n| where [''TimeGenerated''] == toscalar(\\n    ', variables('TableName'), '\\n    | summarize max([''TimeGenerated''])\\n)\\n| extend ExpiryStatus = case(\\n    todatetime(CertExpiration) <= now(), \\\"Expired\\\",\\n    todatetime(CertExpiration) <= now() + 5d, \\\"Expiring soon\\\",\\n    \\\"Not Expired\\\"\\n)\\n| summarize CertificateCount = count() by ExpiryStatus\\n| render piechart\\n\",\"size\":3,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"', resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Expiring soon\",\"color\":\"yellow\"},{\"seriesName\":\"Not Expired\",\"color\":\"green\"},{\"seriesName\":\"Expired\",\"color\":\"redBright\"}]}},\"name\":\"query - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"', variables('TableName'), '\\n| extend ExpirationDate = todatetime(CertExpiration)\\n| extend ExpiryStatus = case(\\n    ExpirationDate <= now(), \\\"Expired\\\",\\n    ExpirationDate <= now() + 5d, \\\"Expiring soon\\\",\\n    \\\"Not Expired\\\"\\n)\\n| where [''TimeGenerated''] == toscalar(\\n    ', variables('TableName'), '\\n    | summarize max([''TimeGenerated''])\\n)\\n| project ExpiryStatus, CertExpiration, CertName, CertSubject, CertRecipient, KeyVault, CertThumbprint, [''TimeGenerated'']\\n| sort by ExpiryStatus\\n\",\"size\":3,\"timeContext\":{\"durationMs\":172800000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"', resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '\"],\"gridSettings\":{\"hierarchySettings\":{\"treeType\":1,\"groupBy\":[\"ExpiryStatus\"],\"expandTopLevel\":true,\"finalBy\":\"ExpiryStatus\"},\"labelSettings\":[{\"columnId\":\"ExpiryStatus\",\"label\":\"Status\"}]}},\"name\":\"query - 1\"}],\"isLocked\":false,\"fallbackResourceIds\":[\"azure monitor\"],\"styleSettings\":{\"paddingStyle\":\"wide\",\"spacingStyle\":\"wide\"}}')]",
                "version": "1.0",
                "sourceId": "azure monitor",
                "category": "workbook"
            }
        },

        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('automationAccountName'), '/dcrEndpointUri')]",
            "dependsOn": [
                "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('dataCollectionEndpointName'))]"
            ],
            "properties": {
                "isEncrypted": false,
                "value": "[concat('\"',reference(resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('dataCollectionEndpointName')), '2023-03-11').logsIngestion.endpoint,'\"')]",
                "description": "The name of the DCR Endpoint URI"
            }
        },

        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('automationAccountName'), '/dcrImmutableId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dataCollectionRuleName'))]"
            ],
            "properties": {
                "isEncrypted": false,
                "value": "[concat('\"',reference(resourceId('Microsoft.Insights/dataCollectionRules', parameters('dataCollectionRuleName')), '2023-03-11').immutableId,'\"')]",
                "description": "The immutable ID of the DCR"
            }
        },
            
        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('automationAccountName'), '/VaultName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "isEncrypted": false,
                "value": "[concat('\"',parameters('keyVaultName'),'\"')]",
                "description": "The name of the KeyVault"
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts/variables",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('automationAccountName'), '/streamName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "isEncrypted": false,
                "value": "[concat('\"',variables('streamName'),'\"')]",
                "description": "The name of the stream"
            }
        },

        {
            "type": "Microsoft.Automation/automationAccounts/runbooks",
            "apiVersion": "2022-08-08",
            "name": "[concat(parameters('AutomationAccountName'), '/CertLCDashboardDataInjestion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "location": "[variables('Location')]",
            "properties": {
                "runbookType": "PowerShell",
                "logVerbose": false,
                "logProgress": false,
                "logActivityTrace": 0,
                "description": "Certificate Lifecycle Dashboard Data Ingestion",
                    "publishContentLink": {
                    "uri": "https://raw.githubusercontent.com/Azure/certlc/main/.runbook/dashboard_fe_v1.ps1",
                    "version": "2.1.0.0"
                }
            }
        },

        {
            "type": "Microsoft.Automation/automationAccounts/schedules",
            "apiVersion": "2023-11-01",
            "name": "[concat(parameters('AutomationAccountName'), '/injestData_hourly')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "startTime": "[parameters('ScheduleDashboardDataStartTime')]",
                "expiryTime": "",
                "interval": 1,
                "frequency": "Hour",
                "timeZone": "Europe/Rome"
            }
        },

        {
            "type": "Microsoft.Automation/automationAccounts/jobSchedules",
            "apiVersion": "2023-11-01",
            "name": "[concat(parameters('AutomationAccountName'), '/',guid(resourceGroup().id, deployment().name,'-CertLCDashboardDataInjestion'))]",
            "dependsOn": ["[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), 'CertLCDashboardDataInjestion')]"],
            "properties": {
                "runbook": {
                    "name": "CertLCDashboardDataInjestion"
                },
                "schedule": {
                    "name": "injestData_hourly"
                }
            }
        },





        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('AA-CertificateOfficerOnKeyVault', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2022-08-08', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },

        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('AA-CryptoOfficerOnKeyVault', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2022-08-08', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },

        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('AA-ReaderOnSA', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2022-08-08', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },    

        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('AA-ReadDataAccessOnSA', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2022-08-08', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },        

        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('AA-StorageQueueDataContributorOnSA', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2022-08-08', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },            

        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('AA-MonitoringMetricsPublisherOnDCR', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dataCollectionRuleName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Insights/dataCollectionRules', parameters('dataCollectionRuleName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2022-08-08', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },   
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('AA-MonitoringMetricsPublisherOnDCE', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('dataCollectionEndpointName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('dataCollectionEndpointName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2022-08-08', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },   
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('AA-LogAnalyticsContributorOnLA', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2022-08-08', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },   

        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('CA-CryptoOfficerOnKeyVault', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('CAvmName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('CAvmName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },

        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('CA-CertificateOfficerOnKeyVault', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('CAvmName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('CAvmName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },        

        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid('DC-SecretUsersOnKeyVault', variables('UniqueStringBasedOnTimeStamp'))]",
            "scope": "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('DCvmName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4633458b-17de-408a-b874-0445c86b69e6')]",
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('DCvmName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        }  

    ],
    "outputs": {
        "dnsIpAddress": {
            "type": "string",
            "value": "[parameters('DCprivateIPAddress')]"
        },
        "domainName": {
            "type": "string",
            "value": "[parameters('DomainName')]"
        },
        "virtualNetworkSubscriptionId": {
            "type": "string",
            "value": "[subscription().subscriptionId]"
        },
        "virtualNetworkResourceGroupName": {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "virtualNetworkName": {
            "type": "string",
            "value": "[parameters('virtualNetworkName')]"
        },
        "virtualNetworkSubnetName": {
            "type": "string",
            "value": "[parameters('subnetName')]"
        },
        "virtualNetworkAddressPrefixes": {
            "type": "string",
            "value": "[parameters('virtualNetworkAddressRange')]"
        },
        "webhookuri": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), parameters('webhookName'))).uri]"
        },
        "workspaceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
        },
        "VaultName": {
            "type": "string",
            "value": "[parameters('keyVaultName')]"
        },
        "dcrImmutableId": {
            "type": "String",
            "value": "[reference(resourceId('Microsoft.Insights/dataCollectionRules', parameters('dataCollectionRuleName')), '2023-03-11').immutableId]"
        },
        "dcrEndpointUri": {
            "type": "String",
            "value": "[reference(resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('dataCollectionEndpointName')), '2023-03-11').logsIngestion.endpoint]"
            },
        "streamName": {
            "type": "String",
            "value": "[variables('streamName')]"
        }
    }
}
